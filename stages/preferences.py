from .base import GorkyStage
import logging
from typing import Dict, Any
from cognistruct.utils.prompts import prompt_manager
import asyncio
import json

logger = logging.getLogger(__name__)

class PreferencesStage(GorkyStage):
    """–≠—Ç–∞–ø —Å–±–æ—Ä–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    async def check_preferences_exist(self, agent) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        
        Args:
            agent: –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            preferences = await self.get_artefact(agent, "preferences")
            return preferences is not None
        except Exception:
            return False
            
    async def _ask_question(self, question, agent) -> Any:
        """
        –ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç
        
        Args:
            question: –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤–æ–ø—Ä–æ—Å–∞
            agent: –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ IO
            
        Returns:
            Any: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None –µ—Å–ª–∏ –≤–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω
        """
        try:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥
            default = question.get("default", "")
            prompt = f"{question['text']}"
            if default:
                prompt += f"[{default}] "
            answer = input(prompt) or default
            
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π –∏ –≤–æ–ø—Ä–æ—Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π
            if not answer and question.get("optional"):
                return None
                
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
            if question.get("type") == "list":
                # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–ø–∏—Å–æ–∫ –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é
                separator = question.get("separator", ",")
                items = [item.strip() for item in answer.split(separator) if item.strip()]
                return items
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ç–∏–ø–∞
                return answer
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}")
            return None
    
    async def process(self, db, llm, agent):
        """–°–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            if await self.check_preferences_exist(agent):
                print("‚úì –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —É–∂–µ —Å–æ–±—Ä–∞–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ø")
                return True
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø—Ä–æ—Å–Ω–∏–∫
            try:
                questionnaire = self.load_prompt("preferences.jinja2")
            except Exception as e:
                logger.error(f"Error loading prompt template preferences.jinja2: {str(e)}")
                return False
            
            if not questionnaire:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø—Ä–æ—Å–Ω–∏–∫")
                return False
                
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ JSON
            try:
                questionnaire = json.loads(questionnaire)
            except json.JSONDecodeError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞: {e}")
                return False
                
            # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            preferences = {}
            
            # –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            print(f"\n{questionnaire['welcome_message']}\n")
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–µ–∫—Ü–∏—è–º
            for section_id, section in questionnaire["sections"].items():
                print(f"\n{section['title']}")
                
                if section.get("type") == "choice":
                    # –í—ã–≤–æ–¥–∏–º –æ–ø—Ü–∏–∏
                    for i, option in enumerate(section["options"], 1):
                        print(f"{i}. {option['text']}")
                    
                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä
                    default = section.get("default", "1")
                    prompt = f"{section['text']}"
                    if default:
                        prompt += f"[{default}] "
                    choice = input(prompt) or default
                    
                    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø—Ü–∏—é
                    try:
                        choice_num = int(choice)
                        selected_option = section["options"][choice_num - 1]
                        preferences[section_id] = {
                            "type": selected_option["id"],
                            "chapters": int(selected_option["value"])
                        }
                    except (ValueError, IndexError):
                        print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                        default_option = section["options"][int(default) - 1]
                        preferences[section_id] = {
                            "type": default_option["id"],
                            "chapters": int(default_option["value"])
                        }
                else:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                    section_data = {}
                    for question in section.get("questions", []):
                        answer = await self._ask_question(question, agent)
                        if answer is None:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤–≤–æ–¥
                            return False
                        section_data[question["id"]] = answer
                    preferences[section_id] = section_data
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            print("\nüìã –ò—Ç–æ–≥–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:")
            print(json.dumps(preferences, indent=2, ensure_ascii=False))
            print()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            return await self.set_artefact(agent, "preferences", preferences)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {str(e)}")
            return False
        