from cognistruct.utils.pipeline import Stage
from cognistruct.utils.prompts import prompt_manager
import logging
from typing import Any, Optional, Union, Tuple, Dict
import asyncio
import itertools
import sys
import time

logger = logging.getLogger(__name__)

class GorkyStage(Stage):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–∏–≥–∏"""
    
    def __init__(self):
        super().__init__()
        self.stage_name = self.__class__.__name__.replace('Stage', '')
    
    async def run(self, db, llm, agent):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —ç—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        Args:
            db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            llm: –û–±—ä–µ–∫—Ç —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏
            agent: –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞–≥–∏–Ω–∞–º
            
        Returns:
            bool: True –µ—Å–ª–∏ —ç—Ç–∞–ø –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            print(f"üìù –≠—Ç–∞–ø: {self.stage_name}")
            result = await self.process(db, llm, agent)
            if result:
                print(f"‚úì –≠—Ç–∞–ø {self.stage_name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ö† –≠—Ç–∞–ø {self.stage_name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            return result
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –≤ —ç—Ç–∞–ø–µ {self.stage_name}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —ç—Ç–∞–ø–µ {self.stage_name}: {str(e)}")
            return False
    
    async def process(self, db, llm, agent):
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —ç—Ç–∞–ø–∞. –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö.
        
        Args:
            db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            llm: –û–±—ä–µ–∫—Ç —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏
            agent: –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞–≥–∏–Ω–∞–º
            
        Returns:
            bool: True –µ—Å–ª–∏ —ç—Ç–∞–ø –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        raise NotImplementedError("–ú–µ—Ç–æ–¥ process –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ")
        
    def get_book_path(self, agent, *parts: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—É—Ç—å –∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É –∫–Ω–∏–≥–∏
        
        Args:
            agent: –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≥–µ–Ω—Ç–∞
            *parts: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –ø—É—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'chapter1', 'scene1')
            
        Returns:
            str: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É
            
        Examples:
            >>> get_book_path(agent)  # Book42
            >>> get_book_path(agent, 'preferences')  # Book42/preferences
            >>> get_book_path(agent, 'chapter1', 'scene1')  # Book42/Chapter1/Scene1
        """
        book_id = agent.current_project.id if agent.current_project else None
        if not book_id:
            raise ValueError("–ù–µ –≤—ã–±—Ä–∞–Ω–∞ —Ç–µ–∫—É—â–∞—è –∫–Ω–∏–≥–∞")
            
        # –ù–∞—á–∏–Ω–∞–µ–º —Å ID –∫–Ω–∏–≥–∏
        path_parts = [("book", str(book_id))]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏, –ø—Ä–µ–æ–±—Ä–∞–∑—É—è –∏—Ö –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        for part in parts:
            if part.startswith('chapter'):
                num = part.replace('chapter', '')
                path_parts.append(('chapter', num))
            elif part.startswith('scene'):
                num = part.replace('scene', '')
                path_parts.append(('scene', num))
            else:
                path_parts.append(part)
                
        return agent.storage.generate_hierarchical_id(*path_parts)
        
    async def get_artefact(self, agent, key: str) -> Any:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        
        Args:
            agent: –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É
            key: –ö–ª—é—á –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
            
        Returns:
            Any: –ó–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
            full_key = self.get_book_path(agent, key)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
            artifact = await agent.storage.read(full_key)
            
            if not artifact:
                return None
            
            return artifact.get("value")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ {key}: {str(e)}")
            return None
            
    async def set_artefact(self, agent, key: str, value: Any, prompt: Optional[str] = None) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —ç—Ç–∞–ø–∞
        
        Args:
            agent: –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É
            key: –ö–ª—é—á –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
            prompt: –¢–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            bool: True –µ—Å–ª–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É
            storage_key = self.get_book_path(agent, key)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = {
                "stage": self.stage_name,
                "stage_class": self.__class__.__name__,
                "book_id": agent.current_project.id
            }
            
            # –ï—Å–ª–∏ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–æ–º–ø—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
            if prompt:
                metadata["prompt"] = prompt
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
            await agent.storage.create({
                "key": storage_key,
                "value": value,
                "metadata": metadata
            })
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ {key}: {str(e)}")
            return False 
        
    async def show_spinner(self, message: str, coro):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏–Ω–Ω–µ—Ä –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—Ä—É—Ç–∏–Ω—ã
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            coro: –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            Any: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—Ä—É—Ç–∏–Ω—ã
        """
        spinner = itertools.cycle(['‚†ã', '‚†ô', '‚†π', '‚†∏', '‚†º', '‚†¥', '‚†¶', '‚†ß', '‚†á', '‚†è'])
        task = asyncio.create_task(coro)
        
        try:
            while not task.done():
                frame = next(spinner)
                print(f"\r{frame} {message}...", end='', flush=True)
                await asyncio.sleep(0.1)
                
            print("\r" + " " * (len(message) + 10) + "\r", end='', flush=True)
            return await task
            
        except asyncio.CancelledError:
            task.cancel()
            print("\r" + " " * (len(message) + 10) + "\r", end='', flush=True)
            raise
            
        except Exception as e:
            print("\r" + " " * (len(message) + 10) + "\r", end='', flush=True)
            raise e 