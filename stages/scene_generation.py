from .base import GorkyStage
import logging
import json
from typing import Dict, Any, List

logger = logging.getLogger(__name__)

class SceneGenerationStage(GorkyStage):
    """–≠—Ç–∞–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω"""
    
    def __init__(self, iterations: int = 3):
        """
        Args:
            iterations: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã
        """
        super().__init__()
        self.iterations = iterations
        
    async def get_scene_version(self, agent, chapter_num: int, scene_num: int) -> int:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–¥–∞–∫—Ü–∏–∏ —Å—Ü–µ–Ω—ã
        
        Args:
            agent: –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É
            chapter_num: –ù–æ–º–µ—Ä –≥–ª–∞–≤—ã
            scene_num: –ù–æ–º–µ—Ä —Å—Ü–µ–Ω—ã
            
        Returns:
            int: –ù–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ (0 –µ—Å–ª–∏ —Å—Ü–µ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á —Å—Ü–µ–Ω—ã
            scene_key = self.get_book_path(agent, f"chapter{chapter_num}/scene{scene_num}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
            latest = await agent.storage.read(scene_key)
            
            if not latest:
                return 0
                
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Ä—Å–∏—é –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
            return latest.get("version", 0)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏ —Å—Ü–µ–Ω—ã: {str(e)}")
            return 0

    async def get_previous_scene(self, agent, story_structure: dict, chapter_number: int, scene_number: int) -> tuple[str, dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ü–µ–Ω–µ
        
        Args:
            agent: –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≥–µ–Ω—Ç–∞
            story_structure: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
            chapter_number: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π –≥–ª–∞–≤—ã
            scene_number: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã
            
        Returns:
            tuple[str, dict]: (—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ü–µ–Ω—ã, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ü–µ–Ω–µ)
        """
        try:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ü–µ–Ω–∞ –ø–µ—Ä–≤–æ–π –≥–ª–∞–≤—ã
            if chapter_number == 1 and scene_number == 1:
                return None, None
                
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ü–µ–Ω–∞ –≥–ª–∞–≤—ã
            if scene_number == 1:
                prev_chapter = next(
                    (ch for ch in story_structure['chapters'] if ch['number'] == chapter_number - 1),
                    None
                )
                if prev_chapter:
                    prev_scene = prev_chapter['scenes'][-1]  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ü–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≥–ª–∞–≤—ã
                    scene_key = f"chapter{chapter_number-1}/scene{prev_scene['number']}"
            else:
                current_chapter = next(
                    (ch for ch in story_structure['chapters'] if ch['number'] == chapter_number),
                    None
                )
                if current_chapter:
                    prev_scene = next(
                        (sc for sc in current_chapter['scenes'] if sc['number'] == scene_number - 1),
                        None
                    )
                    if prev_scene:
                        scene_key = f"chapter{chapter_number}/scene{scene_number-1}"
                    else:
                        return None, None
                else:
                    return None, None
            
            if prev_scene:
                prev_scene_text = await self.get_artefact(agent, scene_key)
                if isinstance(prev_scene_text, str):
                    try:
                        prev_scene_text = json.loads(prev_scene_text)
                        prev_scene_text = prev_scene_text.get('scene_text', '')
                    except json.JSONDecodeError:
                        pass
                
                prev_scene_info = {
                    'title': prev_scene['title'],
                    'description': prev_scene['description'],
                    'characters': prev_scene['characters'],
                    'location': prev_scene['location'],
                    'time': prev_scene['time'],
                    'dramatic_info': prev_scene['dramatic_info']
                }
                return prev_scene_text, prev_scene_info
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ü–µ–Ω—ã: {e}")
        
        return None, None

    async def process(self, db, llm, agent):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Å—Ü–µ–Ω—ã –∫–Ω–∏–≥–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
            story_structure = await self.get_artefact(agent, "story_structure")
            characters = await self.get_artefact(agent, "characters")
            story_outline = await self.get_artefact(agent, "story_outline")
            
            if not all([story_structure, characters, story_outline]):
                logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã")
                return False
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if isinstance(story_structure, str):
                story_structure = json.loads(story_structure)
            if isinstance(characters, str):
                characters = json.loads(characters)
            if isinstance(story_outline, str):
                story_outline = json.loads(story_outline)
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –≥–ª–∞–≤–∞–º –∏ —Å—Ü–µ–Ω–∞–º –∏–∑ story_structure
            for chapter in story_structure['chapters']:
                print(f"\nüìñ –ì–ª–∞–≤–∞ {chapter['number']}/{len(story_structure['chapters'])} {chapter['title']}")
                
                for scene in chapter['scenes']:
                    print(f"\nüé¨ –°—Ü–µ–Ω–∞ {scene['number']}/{len(chapter['scenes'])} {scene['title']}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é —Å—Ü–µ–Ω—ã
                    version = await self.get_scene_version(agent, chapter['number'], scene['number'])
                    
                    # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏–π –Ω–µ—Ç - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å –Ω—É–ª—è
                    if version == 0:
                        print("‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞...")
                        
                        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ü–µ–Ω—É
                        prev_scene_text, prev_scene_info = await self.get_previous_scene(
                            agent, 
                            story_structure, 
                            chapter['number'], 
                            scene['number']
                        )
                        
                        prompt = self.load_prompt("scene_generation.jinja2",
                            params={
                                'scene': scene,
                                'chapter': chapter,
                                'characters': characters,
                                'story_structure': story_structure,
                                'story_outline': story_outline,  # –ü–µ—Ä–µ–¥–∞–µ–º –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                                'prev_scene_text': prev_scene_text,
                                'prev_scene_info': prev_scene_info,
                                'target_word_count': 1500  # TODO: —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º
                            }
                        )
                        
                        messages = [{"role": "user", "content": prompt}]
                        scene_text = await self.show_spinner(
                            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ü–µ–Ω—ã",
                            llm.generate_response(
                                messages
                            )
                        )
                        
                        if not scene_text:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω—É {chapter['number']}/{scene['number']}")
                            continue
                            
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ LLMResponse
                        scene_text = scene_text.content
                        
                        print("\nüìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
                        print("=" * 80)
                        print(scene_text)
                        print("=" * 80)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                        await self.set_artefact(
                            agent,
                            f"chapter{chapter['number']}/scene{scene['number']}",
                            scene_text,
                            prompt
                        )
                        version = 1
                    
                    # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏–π –º–µ–Ω—å—à–µ —á–µ–º –Ω—É–∂–Ω–æ –∏—Ç–µ—Ä–∞—Ü–∏–π - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    if version <= self.iterations:
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é —Ç–µ–∫—Å—Ç–∞
                        current_text = await self.get_artefact(agent, f"chapter{chapter['number']}/scene{scene['number']}")
                        
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
                        for i in range(version - 1, self.iterations):
                            print(f"üìù –ò—Ç–µ—Ä–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {i+1}/{self.iterations}...")
                            
                            prompt = self.load_prompt("editing.jinja2",
                                params={
                                    'text': current_text,
                                    'scene': scene,
                                    'chapter': chapter,
                                    'characters': characters,
                                    'prev_scene_text': prev_scene_text,
                                    'prev_scene_info': prev_scene_info,
                                    'iteration': i+1
                                }
                            )
                            
                            messages = [{"role": "user", "content": prompt}]
                            edited_text = await self.show_spinner(
                                f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∏—Ç–µ—Ä–∞—Ü–∏—è {i+1}/{self.iterations})",
                                llm.generate_response(
                                    messages
                                )
                            )
                            
                            if not edited_text:
                                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω—É {chapter['number']}/{scene['number']} –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {i+1}")
                                continue
                                
                            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ LLMResponse
                            edited_text = edited_text.content
                            
                            print(f"\nüìÑ –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏—Ç–µ—Ä–∞—Ü–∏—è {i+1}):")
                            print("=" * 80)
                            print(edited_text)
                            print("=" * 80)
                            
                            current_text = edited_text
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é —Ç–µ–∫—Å—Ç–∞
                            await self.set_artefact(
                                agent,
                                f"chapter{chapter['number']}/scene{scene['number']}",
                                edited_text,
                                prompt
                            )
                        
                        print(f"‚úÖ –°—Ü–µ–Ω–∞ {chapter['number']}/{scene['number']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                    else:
                        print(f"‚úì –°—Ü–µ–Ω–∞ {chapter['number']}/{scene['number']} —É–∂–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ {version-1} —Ä–∞–∑(–∞), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω: {str(e)}")
            return False 