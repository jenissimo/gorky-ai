from typing import Optional, Dict, Any
from cognistruct.core import IOMessage
import logging

logger = logging.getLogger(__name__)

class CommandHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self, agent):
        self.agent = agent
        
    async def handle_command(self, message: IOMessage, stream: bool = True) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if hasattr(message, 'content'):
            text = message.content
        else:
            text = str(message)
            
        cmd = text.strip().lower()
        
        # –°–ø—Ä–∞–≤–∫–∞
        if cmd == "help" or cmd == "/help":
            print(self._get_help())
            return
            
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏
        if cmd.startswith("/new "):
            result = await self._create_book(text[5:].strip())
            print(result)
            return
            
        # –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–∏–≥–∏
        if cmd.startswith("/open "):
            result = await self._open_book(text[6:].strip())
            print(result)
            return
                
        # –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
        if cmd == "/list":
            result = await self._list_books()
            print(result)
            return
            
        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏
        if cmd.startswith("/delete "):
            result = await self._delete_book(text[8:].strip())
            print(result)
            return
                
        # –ó–∞–ø—É—Å–∫/–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if cmd == "/start":
            result = await self._start_generation()
            print(result)
            return
            
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
            
    def _get_help(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        return """
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/new <–Ω–∞–∑–≤–∞–Ω–∏–µ> - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É
/open <id> - –æ—Ç–∫—Ä—ã—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–∏–≥—É
/list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
/delete <id> - —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É
/start - –Ω–∞—á–∞—Ç—å/–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—É—â–µ–π –∫–Ω–∏–≥–∏
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
        """
        
    async def _create_book(self, name: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–Ω–∏–≥—É"""
        project = await self.agent.project.create({
            "name": name,
            "description": "–ö–Ω–∏–≥–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
            "metadata": {
                "stage": 1,
                "status": "new"
            }
        })
        self.agent.current_project = project
        return f"‚ú® –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–Ω–∏–≥–∞ '{name}' (ID: {project.id})"
        
    async def _open_book(self, project_id: str) -> str:
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–∏–≥—É"""
        try:
            project_id = int(project_id)
            project = await self.agent.project.read(project_id)
            if project:
                self.agent.current_project = project
                stage = project.metadata.get("stage", 1)
                return f"üìñ –û—Ç–∫—Ä—ã—Ç–∞ –∫–Ω–∏–≥–∞ '{project.name}' (—ç—Ç–∞–ø {stage})"
            return "‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        except ValueError:
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–Ω–∏–≥–∏"
            
    async def _list_books(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥"""
        projects = await self.agent.project.search({})
        if not projects:
            return "üìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –ø—É—Å—Ç"
        result = "üìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥:\n"
        for p in projects:
            stage = p.metadata.get("stage", 1)
            status = p.metadata.get("status", "new")
            result += f"- {p.id}: {p.name} (—ç—Ç–∞–ø {stage}, —Å—Ç–∞—Ç—É—Å: {status})\n"
        return result
        
    async def _delete_book(self, project_id: str) -> str:
        """–£–¥–∞–ª—è–µ—Ç –∫–Ω–∏–≥—É –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã"""
        try:
            project_id = int(project_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            project = await self.agent.project.read(project_id)
            if not project:
                return "‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
            book_prefix = f"book{project_id}/"
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∫–Ω–∏–≥–∏
            artifacts = await self.agent.storage.search({
                "key_prefix": book_prefix
            })
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
            deleted_count = 0
            for artifact in artifacts:
                await self.agent.storage.delete(artifact["key"])
                deleted_count += 1
                
            # –£–¥–∞–ª—è–µ–º —Å–∞–º –ø—Ä–æ–µ–∫—Ç
            if await self.agent.project.delete(project_id):
                if self.agent.current_project and self.agent.current_project.id == project_id:
                    self.agent.current_project = None
                return f"üóëÔ∏è –ö–Ω–∏–≥–∞ –∏ {deleted_count} –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —É–¥–∞–ª–µ–Ω—ã"
                
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏"
            
        except ValueError:
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–Ω–∏–≥–∏"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏: {str(e)}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}"
            
    async def _start_generation(self) -> str:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç/–ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–Ω–∏–≥–∏"""
        if not self.agent.current_project:
            return "‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –∫–Ω–∏–≥—É"
            
        stage = self.agent.current_project.metadata.get("stage", 1)
        success = await self.agent.generate_book(stage)
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —ç—Ç–∞–ø
            stage += 1
            await self.agent.project.update(self.agent.current_project.id, {
                "metadata": {
                    "stage": stage,
                    "status": "in_progress"
                }
            })
            return f"‚ú® –≠—Ç–∞–ø {stage-1} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏" 